Hello Jackson,

I hope all is well with you.

I have attached a GitHub link to my proposed solution to the provided problem here:
The solution is provided in get_viaplay_films.py. Test this by running main.py which runs get_viaplay_films.fetch() and writes the result into a file.
It was quite fun to figure it out! However, I have some thoughts regarding the problem I'd like to discuss further.

The link which you gave me (https://content.viaplay.se/pcdash-se/film/samtliga?sort=alphabetical) did not have all the information I needed (play link and audio languages). So I had to do some digging around on Viaplay's website and found the api for each page where I found the audio languages (https://content.viaplay.se/pcdash-se/film/samtliga?&pageNumber=1). Here I would have used the built in pagination function in the request library but problem arose when I tried to implement it together with paralization using asyncio to speed up the process. This led me having to write my own rather crude pagnation function. 

To get the stream link I had to do a request.get() on an URL found in the page api for each movie. This resulted in the code having to do over 900 requests total (page + movies) thus slowing the script down. Maybe there is another way to do this where all the data is presented on the same page but due to the time constraint to solve this problem, and a quite busy weekend of moving, I had to compromise and go for parallelization of the requests. This however caused some problems. One of which is the pagnation function as stated above but the biggest problem is my script triggering what I think is some kind of ddos protection on Viaplays servers due to the excessive amount of requests in a short period of time.

Also, I couldn't find any documentation on the API and this being my first ever reverse-engineer of an API I assume that in order to fetch the data I hade to go deep into the json encoded dictionary ['_embedded']['viaplay:blocks'][0]['_embedded']['viaplay:products']... to get the data I was looking for. I wonder if there is another more elegant method to search for the key and value we are looking for?

As I understand it there is no way of telling which version this API is and therefore this code could break if Viaplay would update their formatting of their API.

Regarding the efficiency:
Without paralization the code ran in 2 minutes and 50 seconds on my desktop PC. I managed to get it down to around 9 seconds using paralization. I'm not quite sure what the treshold is here regarding efficiency but my suggestion is to periodically run this script to fetch the data and store it on Playpilots end for faster access so that just one request is required. I believe this is called "cron jobs"? 

My code returns a list where every element is a dictionary for each movie which can easily be saved in a file using json.dump().